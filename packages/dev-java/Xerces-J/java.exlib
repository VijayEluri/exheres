# Copyright 2009 Sterling X. Winter <replica@exherbo.org>
# Distributed under the terms of the GNU General Public License v2

# Provides basic dependencies and common utility functions for Java-related
# exhereses:
#
#   do_jar             - Create a jarfile
#   do_javadoc         - Generate Javadocs
#   register_mozplugin - Add item to mozplugin-java alternatives module

require alternatives multilib

# Set allow_native=true to provide an option 'native' allowing native
# compilation of Java source and bytecode using GCJ. This should only be
# allowed for packages which have been tested to both compile and run natively
# using GCJ 4.3 or later.
myexparam -b allow_native=false

# Set has_javadocs=true to provide an option 'doc' allowing automatic
# generation of Javadocs from Java source files. This obviously clashes with
# any existing 'doc' option in your exheres/exlib.
myexparam -b has_javadocs=false

# Set virtual_jdk_and_jre_deps=false to omit virtual/jdk and virtual/jre from
# DEPENDENCIES.
myexparam -b virtual_jdk_and_jre_deps=true

if exparam -b allow_native ; then
    MYOPTIONS+="native [[ description = [ Compile Java source/bytecode to native executables ] ]]"
    DEPENDENCIES+="
        build+run:
            native? ( sys-devel/gcc[>=4.3][java] )
    "
    if exparam -b virtual_jdk_and_jre_deps ; then
        DEPENDENCIES+="
            build:
                !native? ( virtual/jdk )
            run:
                !native? ( virtual/jre )
        "
    fi
elif exparam -b virtual_jdk_and_jre_deps ; then
    DEPENDENCIES+="
        build:
            || (
                virtual/jdk:1.5
                virtual/jdk:1.6
            )
        run:
            || (
                virtual/jre:1.5
                virtual/jre:1.6
            )
    "
fi

if exparam -b has_javadocs ; then
    MYOPTIONS+="doc [[ description = [ Build API documentation from Java source ] ]]"
    DEPENDENCIES+="
        build:
            doc? ( virtual/javadoc )
    "
fi

# TODO
do_jar() {
    illegal_in_global_scope
}

# TODO
do_javadoc() {
    illegal_in_global_scope
}

# register_mozplugin /path/to/installed/plugin [ label ]
#
# Register an NSAPI-compatible browser plugin with the "mozplugin-java"
# alternatives module. Call this only from src_install, preferably at the end,
# or at least after the plugin's .so file has been installed to ${IMAGE}. The
# first parameter expects the installation path of the plugin's .so file (do
# not prefix it with ${IMAGE}), and the optional second parameter specifies a
# label to append to the end of the plugin's alternatives module entry.
#
# register_mozplugin can be called multiple times if a package provides
# multiple browser plugins, in which case the label parameter should be used to
# distinguish each plugin. For instance, current Sun JDKs/JREs ship two browser
# plugins for x86: the original plugin, and a greatly improved next-generation
# version, aka "plugin2". The label parameter used for the former is "plugin1",
# and for the latter, "plugin2". (On amd64 only the next-generation plugin is
# available, so the label parameter could be omitted.)
register_mozplugin() {
    illegal_in_global_scope
    [[ ${EXHERES_PHASE} == install ]] || die "${FUNCNAME} can only be called from src_install"

    [[ -z "${1}" ]] && die "register_mozplugin() requires at least a path parameter"

    [[ ! -f "${IMAGE}${1}" ]] && die "register_mozplugin() cannot find '${1}' in \${IMAGE}"

    keepdir /usr/$(get_libdir)/mozilla/plugins

    alternatives_for "mozplugin-java" "${PN}-${SLOT}${2:+-${2}}" "${SLOT}" \
        "/usr/$(get_libdir)/mozilla/plugins/${1##*/}" "${1}"
}

